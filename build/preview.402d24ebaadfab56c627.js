!function(){var e={},t={};function n(){var n,l;!function(){if(e.texture.minFilter=THREE.LinearFilter,e.texture.magFilter=THREE.LinearFilter,e.texture.format=THREE.RGBFormat,e.width=e.texture.image.width,e.height=e.texture.image.height,e.totalPoints=e.width*e.height,"video"!=e.phase){e.visiblePoints=0,e.threshold=60;var t=e.texture.image,n=document.createElement("canvas"),a=n.getContext("2d");n.width=e.width,n.height=e.height,a.scale(1,-1),a.drawImage(t,0,0,e.width,-1*e.height);var r=a.getImageData(0,0,n.width,n.height);e.arrayOfColors=Float32Array.from(r.data);for(var i=0;i<e.totalPoints;i++)e.arrayOfColors[4*i+0]>e.threshold&&e.visiblePoints++}else e.visiblePoints=e.totalPoints}(),"video"==e.phase&&(e.threshold=-1),function(){var t=new THREE.InstancedBufferGeometry,n=new THREE.BufferAttribute(new Float32Array(12),3);n.setXYZ(0,-.5,.5,0),n.setXYZ(1,.5,.5,0),n.setXYZ(2,-.5,-.5,0),n.setXYZ(3,.5,-.5,0),t.setAttribute("position",n);var a=new THREE.BufferAttribute(new Float32Array(8),2);a.setXYZ(0,0,0),a.setXYZ(1,1,0),a.setXYZ(2,0,1),a.setXYZ(3,1,1),t.setAttribute("uv",a),t.setIndex(new THREE.BufferAttribute(new Uint16Array([0,2,1,2,3,1]),1));for(var r=new Float32Array(3*e.visiblePoints),i=new Uint16Array(e.visiblePoints),o=new Float32Array(e.visiblePoints),l=0,s=0;l<e.totalPoints;l++)e.arrayOfColors[4*l+0]<=e.threshold||(r[3*s+0]=l%e.width,r[3*s+1]=Math.floor(l/e.width),i[s]=l,o[s]=Math.random()*Math.PI,s++);t.setAttribute("offset",new THREE.InstancedBufferAttribute(r,3,!1)),t.setAttribute("angle",new THREE.InstancedBufferAttribute(o,1,!1)),t.setAttribute("pindex",new THREE.InstancedBufferAttribute(i,1,!1));var c={uTime:{value:0},uRandom:{value:2},uDepth:{value:40},uSize:{value:2},uTextureSize:{value:new THREE.Vector2(e.width,e.height)},uTexture:{value:e.texture},uTouch:{value:null},uAlphaCircle:{value:0},uAlphaSquare:{value:1},uCircleORsquare:{value:0}},u=new THREE.RawShaderMaterial({uniforms:c,vertexShader:"\n        precision highp float;\n        \n        attribute float pindex;\n        attribute vec3 position;\n        attribute vec3 offset;\n        attribute vec2 uv;\n        attribute float angle;\n        \n        uniform mat4 modelViewMatrix;\n        uniform mat4 projectionMatrix;\n        \n        uniform float uTime;\n        uniform float uRandom;\n        uniform float uDepth;\n        uniform float uSize;\n        uniform vec2 uTextureSize;\n        uniform sampler2D uTexture;\n        uniform sampler2D uTouch;\n        \n        varying vec2 vPUv;\n        varying vec2 vUv;\n        \n        \n            \n        // Description : Array and textureless GLSL 2D simplex noise function.\n        // Author : Ian McEwan, Ashima Arts.\n        vec3 mod289(vec3 x) {\n            return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n        \n        vec2 mod289(vec2 x) {\n            return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n        \n        vec3 permute(vec3 x) {\n            return mod289(((x*34.0)+1.0)*x);\n        }\n        \n        float snoise(vec2 v)\n            {\n            const vec4 C = vec4(0.211324865405187, \n                                0.366025403784439, \n                            -0.577350269189626,  \n                                0.024390243902439); \n            vec2 i  = floor(v + dot(v, C.yy) );\n            vec2 x0 = v -   i + dot(i, C.xx);\n        \n            vec2 i1;\n            i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n            vec4 x12 = x0.xyxy + C.xxzz;\n            x12.xy -= i1;\n        \n            i = mod289(i); // Avoid truncation effects in permutation\n            vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n            + i.x + vec3(0.0, i1.x, 1.0 ));\n        \n            vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n            m = m*m ;\n            m = m*m ;\n        \n            vec3 x = 2.0 * fract(p * C.www) - 1.0;\n            vec3 h = abs(x) - 0.5;\n            vec3 ox = floor(x + 0.5);\n            vec3 a0 = x - ox;\n            m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n        \n            vec3 g;\n            g.x  = a0.x  * x0.x  + h.x  * x0.y;\n            g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n            return 130.0 * dot(m, g);\n        }\n\n        float random(float n) {\n            return fract(sin(n) * 43758.5453123);\n        }\n        \n        void main() {\n            vUv = uv;\n            vec2 puv = offset.xy / uTextureSize;\n            vPUv = puv;\n        \n            vec4 colA = texture2D(uTexture, puv);\n            float grey = colA.r * 0.21 + colA.g * 0.71 + colA.b * 0.07;\n        \n            vec3 displaced = offset;     \n            displaced.xy += vec2(random(pindex) - 0.5, random(offset.x + pindex) - 0.5) * uRandom;\n            float rndz = (random(pindex) + snoise(vec2(pindex * 0.1, uTime * 0.1)));  \n            displaced.z += rndz * (random(pindex) * 2.0 * uDepth);               \n            displaced.xy -= uTextureSize * 0.5;\n        \n            float t = texture2D(uTouch, puv).r;\n            displaced.z += t * -40.0 * rndz;\n            displaced.x += cos(angle) * t * 40.0 * rndz;\n            displaced.y += sin(angle) * t * 40.0 * rndz;     //20\n        \n            float psize = (snoise(vec2(uTime, pindex) * 0.5) + 2.0);\n            psize *= max(grey, 0.2);\n            psize *= uSize;\n        \n            vec4 mvPosition = modelViewMatrix * vec4(displaced, 1.0);\n            mvPosition.xyz += position * psize;\n            gl_Position = projectionMatrix * mvPosition;\n        }\n    ",fragmentShader:"\n        precision highp float;\n        uniform sampler2D uTexture;\n        uniform float uAlphaCircle;        \n        uniform float uAlphaSquare;          \n        uniform float uCircleORsquare;\n\n        varying vec2 vPUv;\n        varying vec2 vUv;\n\n        void main() {\n            vec4 color = vec4(0.0);\n            vec2 uv = vUv;\n            vec2 puv = vPUv;\n\n            vec4 colA = texture2D(uTexture, puv);\n\n            float border = 0.3;\n            float radius = 0.5;\n            float dist = radius - distance(uv, vec2(0.5));   \n            float t = smoothstep(uCircleORsquare, border, dist);\n\n            color = colA;\n            color.a = t;\n\n            //gl_FragColor = vec4(color.r, color.g, color.b, uAlphaSquare);\n            gl_FragColor = vec4(color.r, color.g, color.b, t - uAlphaCircle);\n        }\n    ",depthTest:!1,transparent:!0});e.particlesMesh=new THREE.Mesh(t,u)}(),t.array=[],t.size=80,t.maxAge=120,t.radius=.1,t.red=255,t.canvas=document.createElement("canvas"),t.canvas.width=t.canvas.height=t.size,t.ctx=t.canvas.getContext("2d"),t.ctx.fillStyle="black",t.ctx.fillRect(0,0,t.canvas.width,t.canvas.height),t.texture=new THREE.Texture(t.canvas),e.particlesMesh.material.uniforms.uTouch.value=t.texture,n=new THREE.PlaneGeometry(e.width,e.height,1,1),(l=new THREE.MeshBasicMaterial({color:16777215,wireframe:!0,depthTest:!1})).visible=!1,e.hoverPlate=new THREE.Mesh(n,l),e.scene.add(e.hoverPlate),e.raycaster=new THREE.Raycaster,e.mouse=new THREE.Vector2(0,0),window.addEventListener("mousemove",a,!1),window.addEventListener("resize",(function(){clearTimeout(e.timeout_Debounce),e.timeout_Debounce=setTimeout(s,50)})),s(),e.scene.add(e.particlesMesh),"wall"==e.phase?(timeout=window.setTimeout((function(){"wall"==e.phase&&gsap.to(document.querySelector(".text"),1.5,{css:{top:0},ease:"power4.out"})}),6e3),document.getElementById("preview").addEventListener("click",r,!1),tl=gsap.timeline({paused:!0}),tl.to(document.querySelector(".text"),1,{css:{top:-80},ease:"power4.out"},0),tl.to(e.particlesMesh.material.uniforms.uRandom,2,{value:-20,ease:"power4.out"},0),tl.fromTo(e.particlesMesh.material.uniforms.uSize,2,{value:2},{value:2,ease:"power4.out"},0),tl.fromTo(e.particlesMesh.material.uniforms.uDepth,2,{value:4},{value:160,ease:"power4.out"},0),tl.fromTo(e.particlesMesh.material.uniforms.uSize,2,{value:2},{value:.3,ease:"power4.out"}),tl.to(e.particlesMesh.material.uniforms.uDepth,1.5,{value:4},2),tl.to(e.particlesMesh.position,2,{z:190,ease:"power3.in"},1.5),tl.call(i,null,"<0.5"),tl.to(document.querySelector("#bg"),3,{css:{autoAlpha:0}},"<0.5"),tl.call((function(){e.scene.children[0].geometry.dispose(),e.scene.children[0].material.dispose(),e.scene.remove(e.scene.children[0])}),null,3.5),e.tl=tl):(e.video.play(),timeout&&clearTimeout(timeout),tl2=gsap.timeline(),tl2.to(document.querySelector(".text"),1,{css:{top:-80},ease:"power4.out"},0),tl2.fromTo(e.particlesMesh.material.uniforms.uSize,3,{value:0},{value:1.5},0),tl2.to(e.particlesMesh.material.uniforms.uRandom,3,{value:2},0),tl2.fromTo(e.particlesMesh.material.uniforms.uDepth,7,{value:180},{value:12},0),tl2.fromTo(e.particlesMesh.material.uniforms.uAlphaCircle,3,{value:1},{value:0},0),tl2.fromTo(e.particlesMesh.material.uniforms.uSize,4,{value:1.5},{value:6,yoyo:!0,repeat:1}),tl2.set(e.particlesMesh.material.uniforms.uCircleORsquare,{value:1}),tl2.to(e.particlesMesh.material.uniforms.uDepth,5,{value:160,ease:"elastic.out(1, 0.3)"}),tl2.fromTo(e.particlesMesh.material.uniforms.uDepth,5,{value:160},{value:12,ease:"elastic.out(1, 0.3)"}),window.addEventListener("click",(function(e){e.target.classList.contains("btn")||tl2.seek(.5)}),!1)),o()}function a(n){e.mouse.x=n.clientX/e.renderer.domElement.clientWidth*2-1,e.mouse.y=-n.clientY/e.renderer.domElement.clientHeight*2+1,e.raycaster.setFromCamera(e.mouse,e.camera);var a=e.raycaster.intersectObjects([e.hoverPlate]);"video"==e.phase&&(e.particlesMesh.rotation.y=e.mouse.x/8,e.particlesMesh.rotation.x=-e.mouse.y/8),a[0]&&function(e){var n=0,a=t.array[t.array.length-1];if(a){var r=a.x-e.x,i=a.y-e.y,o=r*r+i*i;n=Math.min(1e4*o,1)}t.array.push({x:e.x,y:e.y,age:0,force:n})}(a[0].uv)}function r(t){t.target.classList.contains("btn")||(document.getElementById("preview").removeEventListener("click",r,!1),e.tl.play())}function i(){cancelAnimationFrame(e.raf),e.video=document.getElementById("video"),e.texture=new THREE.VideoTexture(e.video),e.phase="video",n()}function o(){e.particlesMesh.material.uniforms.uTime.value+=e.clock.getDelta(),t.ctx.fillStyle="black",t.ctx.fillRect(0,0,t.canvas.width,t.canvas.height),t.array.forEach((function(e,n){if(e.age++,e.age>t.maxAge)t.array.splice(n,1);else{var a={x:e.x*t.size,y:(1-e.y)*t.size},r=1;r=e.age<.3*t.maxAge?l(e.age/(.3*t.maxAge),0,1,1):l(1-(e.age-.3*t.maxAge)/(.7*t.maxAge),0,1,1),r*=e.force;var i=t.size*t.radius*r,o=t.ctx.createRadialGradient(a.x,a.y,.25*i,a.x,a.y,i);o.addColorStop(0,"rgba("+t.red+", 255, 255, 0.2)"),o.addColorStop(1,"rgba(0, 0, 0, 0.0)"),t.ctx.beginPath(),t.ctx.fillStyle=o,t.ctx.arc(a.x,a.y,i,0,2*Math.PI),t.ctx.fill()}})),t.texture.needsUpdate=!0,e.texture.needsUpdate=!0,e.renderer.render(e.scene,e.camera),e.raf=requestAnimationFrame(o)}e.container=document.getElementById("preview__canvas"),e.scene=new THREE.Scene,e.camera=new THREE.PerspectiveCamera(50,window.innerWidth/window.innerHeight,.1,1e4),e.camera.position.z=180,e.renderer=new THREE.WebGLRenderer({alpha:!0,antialias:!0}),e.renderer.setSize(e.container.clientWidth,e.container.clientHeight),e.renderer.setPixelRatio(window.devicePixelRatio),e.container.appendChild(e.renderer.domElement),e.clock=new THREE.Clock(!0),e.phase="wall",e.loader=new THREE.TextureLoader,e.texture=e.loader.load("/frontend-portfolio/img/home/kizo.png",n);var l=function(e,t,n,a){return n*Math.sin(e/a*(Math.PI/2))+t};function s(){var t=.3;e.camera.aspect=e.container.clientWidth/e.container.clientHeight,e.camera.updateProjectionMatrix(),e.renderer.setSize(e.container.clientWidth,e.container.clientHeight),window.innerWidth/window.innerHeight<2.8&&(t=-.2);var n=2*Math.tan(e.camera.fov*Math.PI/180/2)*e.camera.position.z/e.height+t;e.particlesMesh.scale.set(n,n,1),e.hoverPlate&&e.hoverPlate.scale.set(n,n,1)}}();